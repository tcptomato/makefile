SHELL := /bin/bash

TARGET = binary_name

C_SRC   :=  $(wildcard *.c)
CPP_SRC :=  $(wildcard *.cpp)
H_SRC   :=  $(wildcard *.h)
LIBRARY :=
INCLUDE_PATH := -I.
LIBRARY_PATH := -L.

CC = gcc
CC_FLAGS = -Wall -O3
CCXX = g++
CCXX_FLAGS = -Wall -O3

LIBRARY := 
LD_FLAGS = 

#include makefile fragments in subdirectories if they exist
-include ./*/make.mk

OBJECTS = $(patsubst %.c, %.o, $(C_SRC))
OBJECTS += $(patsubst %.cpp, %.o, $(CPP_SRC))

RAMDISK_DIR = /mnt/ramdisk
# make ramdisj target creates and mounts a tempfs drive
#OBJ_DIR = $(RAMDISK_DIR)/objs
OBJ_DIR = objs

OBJS = $(addprefix $(OBJ_DIR)/, $(OBJECTS))
DEPS = $(patsubst %.o, %.o.d, $(OBJS))


all: $(TARGET) silent

#include all rules generated by gcc into the makefile
-include $(DEPS)

#dummy target to that we don't get unnecessary mesages ( target is up to date & co)
silent:
	@:

$(TARGET): $(OBJS)
	@echo Linking
	@$(CCXX) $(LD_FLAGS) $(LIBRARY_PATH) -o $(TARGET) $^ $(LIBRARY)

#create output directory if it doesn't exist		
#generate dependency file for current file
# .o and .d are targets of the rule
# create blank targets for each source/header file. Used to update .d files when you delete a file
$(OBJ_DIR)/%.o: %.c
	@mkdir -p $(@D)
	@echo Building $<
	@$(CC) $(CC_FLAGS) $(INCLUDE_PATH) $(ARGS) -c $< -o $@
	@echo -n "$@.d $(@D)/" > $@.d
	@$(CC) $(CC_FLAGS) $(INCLUDE_PATH) $(ARGS) -MM $< >> $@.d
	@cp $@.d $<.tp
	@sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/'  < $<.tp >> $@.d
	@rm -f $<.tp
	
$(OBJ_DIR)/%.o: %.cpp
	@mkdir -p $(@D)
	@echo Building $<
	@$(CCXX) $(CCXX_FLAGS) $(INCLUDE_PATH) $(ARGS) -c $< -o $@
	@echo -n "$@.d $(@D)/" > $@.d
	@$(CCXX) $(CCXX_FLAGS) $(INCLUDE_PATH) $(ARGS) -MM $< >> $@.d
	@cp $@.d $<.tp
	@sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/'  < $<.tp >> $@.d
	@rm -f $<.tp

clean:
	@echo Removing objects directory
	@rm -rf $(OBJ_DIR)
	@echo Removing target
	@rm -f $(TARGET)

print-%: ; @echo $*=$($*)

	
test:
	@echo  $(@D)
	@echo  $(DEPS)
	@echo  $(OBJECTS2)
	@echo Test
	@echo $(C_SRC)
	@echo Test
	@echo $(H_SRC)
	@echo Test
	@echo $(LIBRARY)

run: all
	@./$(TARGET)

ramdisk:
	sudo mkdir $(RAMDISK_DIR)
	sudo mount -t tmpfs -o size=512m tmpfs $(RAMDISK_DIR)


.PHONY: test deploy all ramdisk
